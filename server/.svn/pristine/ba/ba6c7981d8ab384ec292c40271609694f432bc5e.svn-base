using System;
using Server.Targeting;
using Server.Network;
using Server.Scripts;
using Server.Mobiles;
using Server.Items;

namespace Server.Spells.Third
{
	public class PoisonSpell : MagerySpell
	{
		private static SpellInfo m_Info = new SpellInfo(
				"Poison", "In Nox",
				203,
				9051,
				Reagent.Nightshade
			);

        public override int BaseDamage { get { return 0; } }
        public override int DamageVariation { get { return 0; } }
        public override double InterruptChance { get { return 0; } } 
        public override double ResistDifficulty { get { return 30; } }

		public override SpellCircle Circle { get { return SpellCircle.Third; } }

		public PoisonSpell( Mobile caster, Item scroll ) : base( caster, scroll, m_Info )
		{
		}

		public override void OnCast()
		{
            BaseCreature casterCreature = Caster as BaseCreature;

            if (casterCreature != null && casterCreature.NetState == null)
            {
                if (casterCreature.SpellTarget != null)
                {
                    this.Target(casterCreature.SpellTarget);
                }
            }

            else
            {
                Caster.Target = new InternalTarget(this);
            }
		}

		public void Target( Mobile m )
		{
            if (!Caster.CanSee(m) || m.Hidden)
			{
				Caster.SendLocalizedMessage( 500237 ); // Target can not be seen.
			}

			else if ( CheckHSequence( m ) )
			{
                Mobile source = Caster;

                SpellHelper.Turn(source, m);

                SpellHelper.CheckReflect((int)this.Circle, ref source, ref m);

                bool resisted = CheckResist(m);

                if (Caster is BaseCreature && OrangePetals.UnderEffect(m))
                {
                    m.LocalOverheadMessage(MessageType.Emote, 0x3F, true,
                        "* You feel yourself resisting the effects of the poison *");

                    m.NonlocalOverheadMessage(MessageType.Emote, 0x3F, true,
                        String.Format("* {0} seems resistant to the poison *", m.Name));
                } 
                else if (resisted)
                {
                    m.SendLocalizedMessage(501783); // You feel yourself resisting magical energy.
                }
                else
                {
                    int poisonLevel = 0;

                    if (FeatureList.NoxMages.Enabled)
                    {
                        double dist = Caster.GetDistanceToSqrt(m);
                        int chanceToBoostPoison = CalculateChanceToBoostPoison(dist);

                        if (chanceToBoostPoison >= (Utility.Random(99) + 1))
                            poisonLevel = CalculatePoisonLevel(Caster);
                    }

                    if (Caster.Skills[SkillName.Poisoning].Value < 50 && poisonLevel > 1)
                        poisonLevel = 1;
					
                    SpellHelper.Damage(this, m, 2.0, true);
                    m.ApplyPoison(Caster, Poison.GetPoison(poisonLevel));
                }

                m.FixedParticles(0x374A, 10, 15, 5021, EffectLayer.Waist);
                m.PlaySound(0x205);

                HarmfulSpell(m);

                PlayerMobile playerCaster = Caster as PlayerMobile;
                if(playerCaster != null)
                    playerCaster.PoisonsCastedThisSession++;
			}

			FinishSequence();
		}

        private int CalculatePoisonLevel(Mobile Caster)
        {
            double skillBonus = (Caster.Skills[SkillName.Poisoning].Value + Caster.Skills[SkillName.TasteID].Value) / 4;

            double randomBonus = Utility.Random(0, 50);

            double poisonAttempt = skillBonus + randomBonus;

            if (poisonAttempt >= 85)
                return 4;                   // Lethal
            else if (poisonAttempt >= 50)
                return 3;                   // Deadly
            else if (poisonAttempt >= 35)
                return 2;                   // Greater
            else if (poisonAttempt >= 20)
                return 1;                   // Regular
            else
                return 0;                   // Lesser
        }

        private int CalculateChanceToBoostPoison(double dist)
        {
            int distance = (int)Math.Floor(dist);

            if (distance <= 4)
                return 90;
            else if (distance == 5)
                return 60;
            else if (distance == 6)
                return 40;
            else if (distance == 7)
                return 20;
            else if (distance == 8)
                return 10;
            else
                return 0;
        }

		private class InternalTarget : Target
		{
			private PoisonSpell m_Owner;

			public InternalTarget( PoisonSpell owner ) : base( Core.ML ? 10 : 12, false, TargetFlags.Harmful )
			{
				m_Owner = owner;
			}

			protected override void OnTarget( Mobile from, object o )
			{
				if ( o is Mobile )
				{
					m_Owner.Target( (Mobile)o );
				}
			}

			protected override void OnTargetFinish( Mobile from )
			{
				m_Owner.FinishSequence();
			}
		}
	}
}