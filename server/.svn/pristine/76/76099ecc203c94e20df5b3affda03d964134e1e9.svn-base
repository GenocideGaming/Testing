using System;
using System.Collections.Generic;
using System.Text;
using Server.Items;
using Server.Factions;
using Server.Mobiles;
using Server.Accounting;
using Server.Commands;
using Server.Scripts.Custom.Citizenship.CommonwealthBonuses;
using Server.Regions;
using System.IO;
using Server.Scripts.Custom.WebService;


namespace Server.Scripts.Custom.Citizenship
{
    public enum GuardTypes
    {
        NormalGuards = 1,
        DisciplinedGuards = 2,
        WatchfulGuards = 4,
        MinistersGuards = 8
    }

    public enum VendorLevels
    {
        NormalVendors,
        DiligentMerchants
    }

    public interface ICommonwealth
    {
        CommonwealthState State { get; set; }
        CommonwealthDefinition Definition { get; set; }
        CommonwealthRegion TownRegion { get; set; }
        Faction Militia { get; set; }
        MilitiaStronghold HeroHomeRegion { get; set; }
        Point3D HeroGoLocation { get; }
        TownHero Hero { get; set; }
        bool CanAssignCommander { get; set; }
        Mobile Minister { get; set; }
        List<PlayerCitizenshipState> Citizens { get; set; }
        List<TownHero> CapturedHeroes { get; set; }
        CommonwealthElection Election { get; set; }
        void AddCitizen(Mobile m);
        bool CheckExistance(Point3D loc, Map facet, Type type);
        void ResetDoors();
        void OnMyHeroRescue();
        void OnOtherHeroRescue(ICommonwealth other);
        void OnMyHeroReturnHome();
        void OnMyHeroCapture(ICommonwealth capturingCommonwealth);
        void OnOtherHeroReturnHome(TownHero hero);
        void OnOtherHeroCapture(ICommonwealth hero);
        void OnWorldWarWin();
        HeroCellDoor HookupCellDoor(TownHero hero);
        int GetHeroSettings();
        bool AddExileCredit();
        bool AddExile(Mobile target);
        List<CommonwealthSkillBonus> GetSkillBonuses();
        List<CommonwealthResourceBonus> GetResourceBonuses();
        List<CommonwealthCombatBonus> GetCombatBonuses();
        bool IsMinister(Mobile m);
        void Broadcast(string message);
        void Broadcast(int hue, string message);
        void RemoveCitizenFromLock(Mobile player, bool forced);
        void RemoveDeletedCitizen(PlayerMobile player);
        void SetCitizenLeaveTime(Mobile mobile);
        Point3D AcceptCaptive();
        Point3D GetCellLocationForAlreadyCapturedHero(TownHero hero);
        void OnGovernmentChange();
        bool AssignCommander(Mobile from);
        void UpdateCitizens();
        void OnJoinAccepted(Mobile m);
        bool RemoveExile(Mobile m);
        void ScaleBonuses();
    }

    [CustomEnum(new string[] { "Vermell Commonwealth", "Calor Commonwealth", "Pedran Commonwealth", "Arbor MyCommonwealth", "Lillano Commonwealth"})]
    public class Commonwealth : ICommonwealth, IComparable
    {
        private CommonwealthState mState;
        private CommonwealthDefinition mDefinition;
        private UpdateTimer mUpdateTimer;

        private CommonwealthRegion mTownRegion;
        private MilitiaStronghold mHeroHomeRegion;
        private PrincessDungeonRegion mHeroDungeonRegion;

        private Faction mMilitia;
        private bool mCanAssignCommander;

        private static CommonwealthSkillBonuses mAvailableSkillBonuses = new CommonwealthSkillBonuses();
        private static CommonwealthResourceBonuses mAvailableResourceBonuses = new CommonwealthResourceBonuses();
        private static CommonwealthCombatBonuses mAvailableCombatBonuses = new CommonwealthCombatBonuses();
        private static CommonwealthTownBonuses mAvailableTownBonuses = new CommonwealthTownBonuses();
        private static CommonwealthHeroBonuses mAvailableHeroBonuses = new CommonwealthHeroBonuses();

        public CommonwealthState State { get { return mState; } set { mState = value; } }
        public CommonwealthDefinition Definition { get { return mDefinition; } set { mDefinition = value; } }

        public CommonwealthRegion TownRegion { get { return mTownRegion; } set { mTownRegion = value; } }

        public CommonwealthElection Election { get { return mState.Election; } set { mState.Election = value; } }
        public Mobile Minister { get { return mState.Minister; } set { mState.Minister = value; } }

        public List<PlayerCitizenshipState> Citizens { get { return mState.Members; } set { mState.Members = value; } }

        public MilitiaStronghold HeroHomeRegion { get { return mHeroHomeRegion; } set { mHeroHomeRegion = value; } }
        public PrincessDungeonRegion HeroDungeonRegion { get { return mHeroDungeonRegion; } set { mHeroDungeonRegion = value; } }
        public TownHero Hero { get { return mState.Hero; } set { mState.Hero = value; } }
        public List<TownHero> CapturedHeroes { get { return mState.CapturedHeroes; } set { mState.CapturedHeroes = value; } }

        public Faction Militia { get { return mMilitia; } set { mMilitia = value; } }
        public bool CanAssignCommander { get { return mCanAssignCommander; } set { mCanAssignCommander = value; } }
        public static readonly TimeSpan LeaveTime = TimeSpan.FromHours(FeatureList.Citizenship.LeaveTimeInHours);
        public static readonly TimeSpan JoinBlockTime = TimeSpan.FromHours(FeatureList.Citizenship.JoinBlockTimeInHours);

        //We keep a static list of all the commonwealths, this is populated at runtime by the reflector class
        public static List<ICommonwealth> Commonwealths { get { return Reflector.Commonwealths; } }

        //we also keep a list of all possible bonuses that a township can bestow
        public static CommonwealthSkillBonuses AvailableSkillBonuses { get { return mAvailableSkillBonuses; } }
        public static CommonwealthResourceBonuses AvailableResourceBonuses { get { return mAvailableResourceBonuses; } }
        public static CommonwealthCombatBonuses AvailableCombatBonuses { get { return mAvailableCombatBonuses; } }
        public static CommonwealthTownBonuses AvailableTownBonuses { get { return mAvailableTownBonuses; } }
        public static CommonwealthHeroBonuses AvailableHeroBonuses { get { return mAvailableHeroBonuses; } }

        public virtual Point3D TownStoneLocation { get { return new Point3D(0, 0, 0);}}

        public virtual Point3D[] StrongholdDestructableDoorLocations { get { return new Point3D[] { }; } }

        public virtual Point3D HeroGoLocation { get { return new Point3D(0, 0, 0); } }
        public virtual Point3D[] CapturedHeroGoLocations { get { return new Point3D[] { }; } }

        public Commonwealth()
        {
            mState = new CommonwealthState(this);
       
            mUpdateTimer = new UpdateTimer(TimeSpan.FromSeconds(0), TimeSpan.FromMinutes(60), this);
            mUpdateTimer.Start();

        }

        public virtual void AddCitizen(Mobile mob)
        {
            //and add all the chars on this account to the commonwealth
            int count = 0;
            Account acct = mob.Account as Account;
            if (acct != null)
            {
                for (int i = 0; i < acct.Length; i++)
                {
                    PlayerMobile pm = acct[i] as PlayerMobile;
                    if (pm != null)
                    {
                        if (pm.CitizenshipPlayerState != null)
                            continue;

                        PlayerCitizenshipState pcs = new PlayerCitizenshipState(pm, this);
                        if (!Citizens.Contains(pcs))
                        {
                            Citizens.Add(pcs);
                            count++;
                            pm.CitizenshipPlayerState = pcs;
                            pm.InvalidateProperties();
                            //DatabaseController.UpdateCharacterTownship(pm, this);
                        }

                    }
                }
            }
            mob.SendMessage("You have successfully joined a commonwealth, your other characters have also joined.");
            Console.WriteLine("Just added {0} new characters to commonwealth {1} the commonwealth now contains {2} citizens", count, mDefinition.TownName, Citizens.Count);
        }

        public void SetCitizenLeaveTime(Mobile mob)
        {
            Account acct = mob.Account as Account;

            if (acct != null)
            {
                for (int i = 0; i < acct.Length; i++)
                {
                    PlayerMobile m = acct[i] as PlayerMobile;
                    if (m != null)
                    {

                        if (Citizens.Contains(m.CitizenshipPlayerState))
                        {
                            if(m.CitizenshipPlayerState.IsLeaving)
                                continue;
                            m.CitizenshipPlayerState.LeftTownTime = DateTime.Now;

                        }
                        m.InvalidateProperties();
                    }
                }
            }
        }

        public void LockCitizen(Mobile mob)
        {
            Account acct = mob.Account as Account;
            if (acct != null)
            {
                for (int i = 0; i < acct.Length; i++)
                {
                    PlayerMobile m = acct[i] as PlayerMobile;
                    if (m != null)
                    {

                        if (Citizens.Contains(m.CitizenshipPlayerState))
                        {
                            Console.WriteLine("Locking a citizen.");
                            m.CitizenshipPlayerState.LockedToCommonwealth = true;
                        }
                        m.InvalidateProperties();
                    }
                }
            }
            mob.SendMessage("You have successfully revoked your citizenship, you will now be locked from joining a new township for one week (10s).");
        }


        public virtual void RemoveCitizenFromLock(Mobile mob, bool forcefulRemoval)
        {
            Account acct = mob.Account as Account;
            if (acct != null)
            {
                for (int i = 0; i < acct.Length; i++)
                {
                    PlayerMobile m = acct[i] as PlayerMobile;
                    if (m != null)
                    {
                        Faction militiaMembership = Faction.Find(m);

                        if (militiaMembership != null)
                        {
                            if (militiaMembership.Commander == m)
                            {
                                militiaMembership.Commander = null;
                            }
                            militiaMembership.RemoveMember(m);
                            m.FactionPlayerState = null;
                        }

                        if (Citizens.Contains(m.CitizenshipPlayerState))
                        {
                            if (m.CitizenshipPlayerState.Commonwealth != null && m.CitizenshipPlayerState.Commonwealth.Minister == m)
                            {
                                m.CitizenshipPlayerState.Commonwealth.Minister = null;
                            }
                            Citizens.Remove(m.CitizenshipPlayerState);
                            m.CitizenshipPlayerState = null;
                        }

                        //DatabaseController.RemoveCharacterTownship(m, this);
                        m.CitizenshipPlayerState = null;
                        m.InvalidateProperties();
                    }
                }
            }

            if (!forcefulRemoval)
                mob.SendMessage("You have successfully revoked your citizenship");
            else
                mob.SendMessage("Your citizenship has been revoked and you have been exiled from the town!");
        }

        public void RemoveDeletedCitizen(PlayerMobile player)
        {
            if (Citizens.Contains(player.CitizenshipPlayerState))
                Citizens.Remove(player.CitizenshipPlayerState);

            player.CitizenshipPlayerState = null;
            player.InvalidateProperties();
        }

        private bool AlreadyHasCharInCommonwealth(PlayerMobile pm)
        {
            Account account = pm.Account as Account;

            for (int i = 0; i < account.Length; i++)
            {
                ICommonwealth cw = Find(account[i]);
                if (cw != null)
                    return true;
            }
            return false;
        }
        /*
        private bool IsBlockedFromJoining(PlayerMobile mob)
        {
            Account acct = mob.Account as Account;

            for (int i = 0; i < acct.Length; i++)
            {
                PlayerMobile m = acct[i] as PlayerMobile;
                if (m != null)
                {
                    
                    if (m.CitizenshipPlayerState != null)
                    {
                        Console.WriteLine("Checking if the char is blocked from joining " + m.CitizenshipPlayerState.LeftTownTime);
                        if (m.CitizenshipPlayerState.LeftTownTime > DateTime.MinValue)
                        {
                            TimeSpan timeSincePlayerLeftCommonwealth = DateTime.Now - m.CitizenshipPlayerState.LeftTownTime;
                            Console.WriteLine("Checking if the char is blocked from joining, " + timeSincePlayerLeftCommonwealth + " since revoke.");
                            if (timeSincePlayerLeftCommonwealth <= JoinBlockTimeInDays)
                                return true;
                        }
                    }
                }
            }
            return false;
        }
         * */
        //Called when a user invokes the join commonwealth command/uses the town stone
        public virtual void OnJoinAccepted(Mobile mob)
        {
            PlayerMobile pm = mob as PlayerMobile;
            if(pm == null)
                return;
            PlayerCitizenshipState pcs = PlayerCitizenshipState.Find(pm);

            //TODO young players cannot join? cannot join if player is currently leaving a commonwealth, or is blocked from joining for a period
            if (pcs != null && pcs.LockedToCommonwealth)
                pm.SendMessage("You are blocked from joining for another " + (pcs.LeftTownTime.Add(JoinBlockTime)));
            else if (AlreadyHasCharInCommonwealth(pm))
                pm.SendMessage("You are already a citizen of a town!");
            else
                AddCitizen(pm);
        }

        public bool IsMinister(Mobile mob)
        {
            if (mob == null)
                return false;

            return (mob.AccessLevel >= AccessLevel.GameMaster || mob == Minister);
        }

        public virtual bool AddExile(Mobile mob)
        {
            if (mob == null || mob == Minister || mob.AccessLevel > AccessLevel.Player)
                return false;

            PlayerMobile playerToExile = mob as PlayerMobile;

            if (playerToExile == null)
                return false;

            if (!mState.ExileList.Contains(mob) && mState.ExileList.Count < mState.ExileCredits * 5)
            {
                mState.ExileList.Add(mob);
                playerToExile.AddExileTimer(this);
                Broadcast(mob.Name + " has been exiled from your township.");
                if (mTownRegion.Contains(mob.Location))
                {
                    mob.InExileRegion = true;
                    mob.Criminal = true;
                }
                //DatabaseController.UpdateExiles(this, mob, false);
                return true;
            }
            return false;
        }

        public virtual bool AddExileCredit()
        {
            if (mState.AvailablePoints - 1 > 0 && (mState.GuardSettings & (int)GuardTypes.MinistersGuards) != 0)
            {
                mState.ExileCredits++;
                mState.AvailablePoints--;
                return true;
            }
            return false;
        }

        public virtual bool RemoveExile(Mobile mob)
        {
            if (mob == null)
                return false;

            if (mState.ExileList.Contains(mob))
            {
                mState.ExileList.Remove(mob);

                if (mTownRegion.Contains(mob.Location))
                {
                    mob.InExileRegion = false;
                    mob.Criminal = false;
                    mob.Criminal = true; //set criminal for 2 min just in case they were being bad in town. 
                    mob.SendMessage("You have been removed as an exile of " + this.Definition.TownName + ". You will remain a criminal for two minutes.");
                }
                else
                {
                    mob.SendMessage("You have been removed as an exile of " + this.Definition.TownName);
                }

                Broadcast(mob.Name + " is no longer an exile of your township.");
                //DatabaseController.UpdateExiles(this, mob, true);
                return true;
            }

            return false;
        }

        //When our hero is captured by another town
        public virtual void OnMyHeroCapture(ICommonwealth capturingCommonwealth)
        {
            ScaleBonuses();
            Broadcast("To arms, your town hero has been captured by "+capturingCommonwealth.Definition.TownName + ", your town bonuses have been decreased.");
            UpdateCitizens();
        }

        //When we capture another hero
        public virtual void OnOtherHeroCapture(ICommonwealth otherCommonwealth)
        {
            if (!CapturedHeroes.Contains(otherCommonwealth.Hero)) {
                CapturedHeroes.Add(otherCommonwealth.Hero);
            }
            ScaleBonuses();
            Broadcast("Rejoice, your town has captured " + otherCommonwealth.Definition.TownName + "'s town hero! Your town bonuses have been increased.");
            UpdateCitizens();
        }

        public virtual void OnWorldWarWin()
        {
            ScaleBonuses();
            Broadcast("Rejoice, your town has won the World War! Your town has secured the World War Trophy and your bonuses have been increased.");
            UpdateCitizens();
        }

        public virtual void OnOtherHeroRescue(ICommonwealth otherCommonwealth)
        {
            while (CapturedHeroes.Contains(otherCommonwealth.Hero))
            {
                CapturedHeroes.Remove(otherCommonwealth.Hero);
            }
                
            ScaleBonuses();
            Broadcast(otherCommonwealth.Definition.TownName + " has recaptured their hero from your dungeons! Your town bonuses have been decreased.");
            UpdateCitizens();
        }

        public virtual void OnMyHeroRescue()
        {
            ScaleBonuses();
            Broadcast("Rejoice, your town hero has been rescued! Your town bonuses have been increased.");
            UpdateCitizens();
            ResetDoors();
        }

        public virtual void OnMyHeroReturnHome()
        {
            ScaleBonuses();
            Broadcast("The hero has returned home.");
            UpdateCitizens();
            ResetDoors();
        }

        public virtual void OnOtherHeroReturnHome(TownHero hero)
        {
            if (CapturedHeroes.Contains(hero))
            {
                while (CapturedHeroes.Contains(hero)) // somehow extra heroes getting in there.. making SURE that they don't stay
                {
                    CapturedHeroes.Remove(hero);
                }
                ScaleBonuses();
                UpdateCitizens();
                Broadcast("A captured hero has returned home.");
            }
        }
        public void ScaleBonuses()
        {
            if (Hero == null)
                return;

            ScaleCombatBonuses();
            ScaleResourceBonuses();
            ScaleSkillBonuses();
        }

        private void ScaleCombatBonuses()
        {
            List<CommonwealthCombatBonus> bonuses = GetCombatBonuses();

            if (!Hero.IsHome)
            {
                foreach (CommonwealthCombatBonus combatBonus in bonuses)
                {
                    combatBonus.Active = false;
                }
            }
            else
            {
                foreach (CommonwealthCombatBonus combatBonus in bonuses)
                {
                    combatBonus.Active = true;
                }
            }
        }

        public void ScaleResourceBonuses()
        {
            List<CommonwealthResourceBonus> bonuses = GetResourceBonuses();

            foreach (CommonwealthResourceBonus resourceBonus in bonuses)
            {
                resourceBonus.HarvestBonus = Commonwealth.AvailableResourceBonuses.Bonuses[resourceBonus.DictKey].HarvestBonus;
            }

            if (!Hero.IsHome)
            {
                foreach (CommonwealthResourceBonus resourceBonus in bonuses)
                {
                    int originalBonus = resourceBonus.HarvestBonus;

                    resourceBonus.HarvestBonus = (int)Math.Round(resourceBonus.HarvestBonus - originalBonus * FeatureList.Citizenship.AbsentHeroResourceBonusReduction);
                    for (int i = 0; i < CapturedHeroes.Count; i++)
                    {
                        resourceBonus.HarvestBonus = (int)Math.Round(resourceBonus.HarvestBonus + originalBonus * FeatureList.Citizenship.ResourceBonusIncreasePerCapturedHero);
                    }
                    // world war statue is like an extra hero that sticks around.
                    if (WorldWarStatue.Instance != null && WorldWarStatue.Instance.LastWinner == this.Definition.TownName)
                    {
                        resourceBonus.HarvestBonus = (int)Math.Round(resourceBonus.HarvestBonus + originalBonus * FeatureList.Citizenship.ResourceBonusIncreasePerCapturedHero);
                    }
                }
            }
            else
            {
                foreach (CommonwealthResourceBonus resourceBonus in bonuses)
                {
                    int originalBonus = resourceBonus.HarvestBonus;
                    for (int i = 0; i < CapturedHeroes.Count; i++)
                    {
                        resourceBonus.HarvestBonus = (int)Math.Round(resourceBonus.HarvestBonus + originalBonus * FeatureList.Citizenship.ResourceBonusIncreasePerCapturedHero);
                    }
                    if (WorldWarStatue.Instance != null && WorldWarStatue.Instance.LastWinner == this.Definition.TownName)
                    {
                        resourceBonus.HarvestBonus = (int)Math.Round(resourceBonus.HarvestBonus + originalBonus * FeatureList.Citizenship.ResourceBonusIncreasePerCapturedHero);
                    }
                }
            }
        }

        private void ScaleSkillBonuses()
        {
            List<CommonwealthSkillBonus> skillBonuses = GetSkillBonuses();

            float finalBonus = 1.0f;
            float baseBonusModifier = FeatureList.Citizenship.SkillChanceBonus - 1.0f; // =0.35 currently
            float heroBonusScaler = 1.0f; // will be anywhere between 0.5 and 2.0
            if (!Hero.IsHome)
            {
                heroBonusScaler -= FeatureList.Citizenship.AbsentHeroSkillBonusReduction; // -0.5 per            
            }
            
            for (int i = 0; i < CapturedHeroes.Count; i++)
            {
                heroBonusScaler += FeatureList.Citizenship.SkillBonusIncreasePerCapturedHero; // +0.5 per
            }
            if (WorldWarStatue.Instance != null && WorldWarStatue.Instance.LastWinner == this.Definition.TownName)
            {
                heroBonusScaler += FeatureList.Citizenship.SkillBonusIncreasePerCapturedHero;
            }

            finalBonus += (baseBonusModifier * heroBonusScaler); // 0.35 * (0.5 to 2.0) = somewhere between 0.175-0.7

            foreach (CommonwealthSkillBonus skillBonus in skillBonuses)
            {
                skillBonus.ChanceBonus = finalBonus;
            }
        }

        public virtual Point3D AcceptCaptive() // somehow capturedHeroes count is 2 even though it shouldn't be?!??!?
        {
            if (CapturedHeroes.Count >= 2)
            {
                return new Point3D(0, 0, 0); //go home
            }
            else
            {
                return CapturedHeroGoLocations[CapturedHeroes.Count];
            }
        }

        public virtual Point3D GetCellLocationForAlreadyCapturedHero(TownHero hero)
        {
            for (int i = 0; i < CapturedHeroes.Count; i++)
            {
                if (i > 1) {
                    Console.WriteLine(this.Definition.TownName + " has more than 2 heros in CapturedHeroes????: ");
                }
                if (CapturedHeroes[i] == hero)
                {
                    return CapturedHeroGoLocations[i];
                }
            }
            return new Point3D(0, 0, 0);
        }

        public virtual void ResetDoors()
        {
            HeroProtectionDoorLeft leftDoor = null;
            HeroProtectionDoorRight rightDoor = null;
            if (!CheckExistance(StrongholdDestructableDoorLocations[0], MapFactory.Felucca, typeof(HeroProtectionDoorLeft)))
            {
                leftDoor = new HeroProtectionDoorLeft(this, rightDoor);
                leftDoor.MoveToWorld(StrongholdDestructableDoorLocations[0], MapFactory.Felucca);
            }
            else
            {
                foreach (Item item in MapFactory.Felucca.GetItemsInRange(StrongholdDestructableDoorLocations[0], 0))
                {
                    if (item is HeroProtectionDoorLeft)
                        leftDoor = item as HeroProtectionDoorLeft;
                }
            }
            if (!CheckExistance(StrongholdDestructableDoorLocations[1], MapFactory.Felucca, typeof(HeroProtectionDoorRight)))
            {
                rightDoor = new HeroProtectionDoorRight(this, leftDoor);
                rightDoor.MoveToWorld(StrongholdDestructableDoorLocations[1], MapFactory.Felucca);
            }
            else
            {
                foreach (Item item in MapFactory.Felucca.GetItemsInRange(StrongholdDestructableDoorLocations[1], 0))
                {
                    if(item is HeroProtectionDoorRight)
                        rightDoor = item as HeroProtectionDoorRight;
                }
            }

            if (leftDoor == null || rightDoor == null)
            {
                LogDoorsNull(this);
                return;
            }

            leftDoor.Partner = rightDoor;
            rightDoor.Partner = leftDoor;

            if (!CheckExistance(StrongholdDestructableDoorLocations[2], MapFactory.Felucca, typeof(HeroCellDoor)))
            {
                HeroCellDoor cellDoor = new HeroCellDoor(this);
                cellDoor.MoveToWorld(StrongholdDestructableDoorLocations[2], MapFactory.Felucca);
            }

            if (!CheckExistance(StrongholdDestructableDoorLocations[3], MapFactory.Felucca, typeof(HeroCellDoor)))
            {
                HeroCellDoor cellDoor = new HeroCellDoor(this);
                cellDoor.MoveToWorld(StrongholdDestructableDoorLocations[3], MapFactory.Felucca);
            }
        }

        public bool CheckExistance(Point3D loc, Map facet, Type type)
        {
            foreach (Item item in facet.GetItemsInRange(loc, 0))
            {
                if (type.IsInstanceOfType(item))
                    return true;
            }

            return false;
        }
        
        public virtual HeroCellDoor HookupCellDoor(TownHero hero)
        {
            foreach (Item item in MapFactory.Felucca.GetItemsInRange(hero.Location, 3))
            {
                var heroCellDoor = item as HeroCellDoor;
                if (heroCellDoor != null)
                {
                    heroCellDoor.Hero = hero;
                    return heroCellDoor;
                }
            }

            HeroCellDoor cellDoor = new HeroCellDoor(this);
            Point3D location = hero.Location.Y == 3892 ? StrongholdDestructableDoorLocations[3] : StrongholdDestructableDoorLocations[2];
            cellDoor.MoveToWorld(location, MapFactory.Felucca);
            cellDoor.Hero = hero;

            return cellDoor;
        }

        //This is the crappy way of getting the skillbonuses from the general bonuses without linq
        public virtual List<CommonwealthSkillBonus> GetSkillBonuses()
        {
            List<CommonwealthSkillBonus> returnList = new List<CommonwealthSkillBonus>();

            foreach (CommonwealthBonus bonus in mState.Bonuses)
            {
                if (bonus.Type == BonusTypes.Skill)
                    returnList.Add(bonus as CommonwealthSkillBonus);
            }
            return returnList;
        }

        public virtual List<CommonwealthResourceBonus> GetResourceBonuses()
        {
            List<CommonwealthResourceBonus> returnList = new List<CommonwealthResourceBonus>();

            foreach (CommonwealthBonus bonus in mState.Bonuses)
            {
                if (bonus.Type == BonusTypes.Resource)
                    returnList.Add(bonus as CommonwealthResourceBonus);
            }
            return returnList;
        }

        public virtual List<CommonwealthCombatBonus> GetCombatBonuses()
        {
            List<CommonwealthCombatBonus> returnList = new List<CommonwealthCombatBonus>();

            foreach (CommonwealthBonus bonus in mState.Bonuses)
            {
                if (bonus.Type == BonusTypes.Combat)
                    returnList.Add(bonus as CommonwealthCombatBonus);
            }
            return returnList;

        }

        public virtual int GetHeroSettings()
        {
            return mState.HeroSettings;
        }

        public virtual void OnGovernmentChange()
        {
            mState.ClearBonuses();
            foreach (Mobile mob in mState.ExileList)
            {
                PlayerMobile player = mob as PlayerMobile;
                if (player != null)
                    player.RemoveExileTimer(this);
            }
            mState.ExileList.Clear();
            mCanAssignCommander = true;
            if (Militia != null && Militia.Commander != null)
            {
                Militia.Commander = null;
            }

            if (Hero != null)
            {
                if(!Hero.IsHome && Hero.State == HERO_STATES.Captured)
                {
                    Hero.ReturnHomeAndGoCaptureImmune();
                }
            }
            else
            {
                Console.WriteLine("Recreating a hero because it is null for " + Definition.TownName);
                Hero = new TownHero(this);
                Hero.MoveToWorld(HeroGoLocation, Map.Felucca);
                OnMyHeroReturnHome();
            }

            CapturedHeroes.Clear(); //as a precaution and cleanup for the leak that was fixed above 

            Broadcast("The change in goverment has caused all town bonuses to be revoked.");
            UpdateCitizens();

            //DatabaseController.UpdateTownshipOnGovernementChange(this);
        }

        public virtual bool AssignCommander(Mobile callingMinister)
        {
            if (!mCanAssignCommander && mMilitia.Commander != null)
                return false;

            Faction.FactionCommander_OnCommand(new CommandEventArgs(callingMinister, "FactionCommander", string.Empty, new string[] { }));            
            return true;
            
        }

        public virtual void UpdateCitizens()
        {
            List<CommonwealthSkillBonus> skillBonuses = GetSkillBonuses();
            List<CommonwealthResourceBonus> resourceBonuses = GetResourceBonuses();
            List<CommonwealthCombatBonus> combatBonuses = GetCombatBonuses();

            foreach (PlayerCitizenshipState pcs in Citizens)
            {
                pcs.UpdateBonuses(resourceBonuses, skillBonuses, combatBonuses, mState.HeroSettings);
            }
        }

        public void Broadcast(string message)
        {
            Broadcast(0xFE, message); // 0xFE: light gold color message...
        }

        public void Broadcast(int hue, string message)
        {
            foreach (PlayerCitizenshipState pcs in Citizens)
            {
                pcs.Mobile.SendMessage(hue, message);
            }
        }

        //Gets the commonwealth of a mobile, searching the control master if the mobile is a creature
        public static ICommonwealth Find(Mobile mobile)
        {
            PlayerCitizenshipState pcs = PlayerCitizenshipState.Find(mobile);

            if (pcs != null)
                return pcs.Commonwealth;

            if (mobile is BaseCreature)
            {
                BaseCreature bc = (BaseCreature)mobile;

                if (bc.Controlled)
                    return Find(bc.ControlMaster);
            }

            return null;
        }

        //Finds a commonwealth from our maintained list from a townName
        public static ICommonwealth Find(string townName)
        {
            foreach (Commonwealth cw in Commonwealths)
            {
                if (cw.Definition.TownName == townName)
                {
                    return cw;
                }
            }
            return null;
        }

        public static ICommonwealth Find(TownHero hero)
        {
            foreach (Commonwealth cw in Commonwealths)
            {
                if (cw.Hero == hero)
                {
                    return cw;
                }
            }
            return null;
        }

        //Write/Read a refernece for serialization
        public static void WriteReference(GenericWriter writer, ICommonwealth commonwealth)
        {
            int idx = Commonwealths.IndexOf(commonwealth);
            writer.WriteEncodedInt((int)idx);
        }

        public static ICommonwealth ReadReference(GenericReader reader)
        {
            int idx = reader.ReadEncodedInt();
            if (idx >= 0 && idx < Commonwealths.Count)
                return Commonwealths[idx];
            return null;
        }

        //Now for all of the commands a gm/player can use
        public static void Initialize()
        {

            CommandSystem.Register("ResetTownships", AccessLevel.GameMaster, new CommandEventHandler(OnCommand_ResetCommonwealths));
            CommandSystem.Register("JoinTownship", AccessLevel.Player, new CommandEventHandler(OnCommand_JoinCommonwealth));
            CommandSystem.Register("RevokeCitizenship", AccessLevel.Player, new CommandEventHandler(OnCommand_RevokeCitizenship));
            CommandSystem.Register("RevokeCitizenshipNow", AccessLevel.GameMaster, new CommandEventHandler(OnCommand_RevokeCitizenshipNow));
            CommandSystem.Register("GetTownships", AccessLevel.GameMaster, new CommandEventHandler(OnCommand_GetCommonwealths));
            CommandSystem.Register("CitizenshipStatus", AccessLevel.Player, new CommandEventHandler(OnCommand_CitizenshipStatus));
            CommandSystem.Register("AddSkillBonusToTownship", AccessLevel.GameMaster, new CommandEventHandler(OnCommand_AddSkillBonusToTownship)); //test method
            CommandSystem.Register("AddResourceBonusToTownship", AccessLevel.GameMaster, new CommandEventHandler(OnCommand_AddResourceBonusToTownship));
            CommandSystem.Register("AddCombatBonusToTownship", AccessLevel.GameMaster, new CommandEventHandler(OnCommand_AddCombatBonusToTownship));
            CommandSystem.Register("AddTownBonusToTownship", AccessLevel.GameMaster, new CommandEventHandler(OnCommand_AddTownBonusToTownship));
            CommandSystem.Register("RemoveTownshipBonuses", AccessLevel.GameMaster, new CommandEventHandler(OnCommand_RemoveTownshipBonuses));
            CommandSystem.Register("ResetHeroes", AccessLevel.GameMaster, new CommandEventHandler(OnCommand_ResetHeroes));
            CommandSystem.Register("HardResetHero", AccessLevel.Administrator, new CommandEventHandler(OnCommand_HardResetHero));
        }

        public static void OnCommand_HardResetHero(CommandEventArgs e)
        {
            if (e.Mobile.Region is MilitiaStronghold)
            {
                MilitiaStronghold stronghold = e.Mobile.Region as MilitiaStronghold;
                ICommonwealth cw = stronghold.Owner;

                if (cw.Hero != null)
                {
                    cw.Hero.Delete();  
                }

                cw.Hero = new TownHero(cw);
                cw.Hero.MoveToWorld(cw.HeroGoLocation, Map.Felucca);
                e.Mobile.SendMessage("There hero should be home now.");
            }
            else
            {
                e.Mobile.SendMessage("You must be within a militia stronghold to hard reset a hero.");
            }
        }

        public static void OnCommand_ResetHeroes(CommandEventArgs e)
        {
            foreach (Commonwealth township in Commonwealth.Commonwealths)
            {
                if (township.Hero == null)
                {
                    e.Mobile.SendMessage("Having to create a tow hero for " + township.Definition.TownName + " its hero is null");
                    township.Hero = new TownHero(township);
                    township.Hero.MoveToWorld(township.HeroGoLocation, Map.Felucca);
                }
                else
                {
                    if (township.Hero.MyHomeRegion == null)
                    {
                        e.Mobile.SendMessage("Having to recreate a tow hero for " + township.Definition.TownName);
                        township.Hero.Delete();
                        township.Hero = new TownHero(township);
                        township.Hero.MoveToWorld(township.HeroGoLocation, Map.Felucca);
                    }
                    else
                    {
                        e.Mobile.SendMessage("Returning a town hero to its home for " + township.Definition.TownName);
                        township.Hero.ReturnHome();
                    }
                }
                township.CapturedHeroes.Clear();
                township.ScaleBonuses();
                township.ResetDoors();
                township.Broadcast("Heroes have been reset, all bonuses from hero capture have been removed.");
            }
        }

        public static void OnCommand_RemoveTownshipBonuses(CommandEventArgs e)
        {
            ICommonwealth cw = Find(e.Mobile);
            if (cw != null)
            {
                cw.State.ClearBonuses();
            }
            e.Mobile.SendMessage("{0}'s bonuses have been cleared", cw.Definition.TownName);
        }

        public static void OnCommand_AddTownBonusToTownship(CommandEventArgs e)
        {
            if (e.Arguments.Length < 1)
            {
                e.Mobile.SendMessage("You must enter which skill to add to your township.");
                return;
            }
            string bonusName = e.Arguments[0];


            ICommonwealth cw = Find(e.Mobile);

            if (!AvailableTownBonuses.Bonuses.ContainsKey(bonusName))
            {
                e.Mobile.SendMessage("That is not a valid skill bonus type.");
                return;
            }

            bool succesfulAdd = cw.State.AddNewBonus(AvailableTownBonuses.Bonuses[bonusName]);

            if (!succesfulAdd)
            {
                e.Mobile.SendMessage("The township does not have enough points available to add that bonus package!");
                return;
            }


            e.Mobile.SendMessage("Listing your township's bonuses");


            List<CommonwealthTownBonus> townBonuses = new List<CommonwealthTownBonus>();
            foreach (CommonwealthBonus bonus in cw.State.Bonuses)
            {
                if (bonus.Type == BonusTypes.Town)
                {
                    e.Mobile.SendMessage(AvailableTownBonuses.Bonuses[bonus.DictKey].ToString());
                    townBonuses.Add(AvailableTownBonuses.Bonuses[bonus.DictKey]);
                }
            }

            switch (AvailableTownBonuses.Bonuses[bonusName].BonusType)
            {
                case TownBonusTypes.MinistersGuards:
                    cw.State.GuardSettings |= (int) GuardTypes.MinistersGuards;
                    cw.State.ExileCredits = 1;
                    break;
                case TownBonusTypes.WatchfulGuards:
                    cw.State.GuardSettings |= (int)GuardTypes.WatchfulGuards;
                    break;
                case TownBonusTypes.DiscplinedGuards:
                    cw.State.GuardSettings |= (int)GuardTypes.DisciplinedGuards;
                    break;
                case TownBonusTypes.DiligentMerchants:
                    cw.State.VendorLevel = VendorLevels.DiligentMerchants;
                    break;
            }

        }

        public static void OnCommand_AddSkillBonusToTownship(CommandEventArgs e)
        {
            if (e.Arguments.Length < 1)
            {
                e.Mobile.SendMessage("You must enter which skill to add to your township.");
                return;
            }
            string bonusName = e.Arguments[0];


            ICommonwealth cw = Find(e.Mobile);

            if (!AvailableSkillBonuses.Bonuses.ContainsKey(bonusName))
            {
                e.Mobile.SendMessage("That is not a valid skill bonus type.");
                return;
            }

            bool succesfulAdd = cw.State.AddNewBonus(AvailableSkillBonuses.Bonuses[bonusName]);

            if (!succesfulAdd)
            {
                e.Mobile.SendMessage("The township does not have enough points available to add that bonus package!");
                return;
            }

            
            e.Mobile.SendMessage("Listing your township's bonuses");


            List<CommonwealthSkillBonus> skillBonuses = new List<CommonwealthSkillBonus>();
            foreach (CommonwealthBonus bonus in cw.State.Bonuses)
            {
                if (bonus.Type == BonusTypes.Skill)
                {
                    e.Mobile.SendMessage(AvailableSkillBonuses.Bonuses[bonus.DictKey].ToString());
                    skillBonuses.Add(AvailableSkillBonuses.Bonuses[bonus.DictKey]);
                }
            }
            //update all the player states to the new bonuses
            foreach (PlayerCitizenshipState pcs in cw.Citizens)
            {
                pcs.SkillBonuses.Clear();
                pcs.SkillBonuses.AddRange(skillBonuses);

            }
        }

        public static void OnCommand_AddResourceBonusToTownship(CommandEventArgs e)
        {
            if (e.Arguments.Length < 1)
            {
                e.Mobile.SendMessage("You must enter which skill to add to your township.");
                return;
            }
            string bonusName = e.Arguments[0];

            ICommonwealth cw = Find(e.Mobile);

            if (!Commonwealth.AvailableResourceBonuses.Bonuses.ContainsKey(bonusName))
            {
                e.Mobile.SendMessage("That is not a valid resource bonus type.");
                return;
            }

            bool succesfulAdd = cw.State.AddNewBonus(Commonwealth.AvailableResourceBonuses.Bonuses[bonusName]);

            if (!succesfulAdd)
            {
                e.Mobile.SendMessage("The township does not have enough points available to add that bonus package! Your add requires {0} but the township only has {1} points available.",
                    Commonwealth.AvailableResourceBonuses.Bonuses[bonusName].PointCost, cw.State.AvailablePoints);
                return;
            }

            e.Mobile.SendMessage("Listing your township's bonuses.");
            List<CommonwealthResourceBonus> resourceBonuses = new List<CommonwealthResourceBonus>();
            foreach (CommonwealthBonus bonus in cw.State.Bonuses)
            {
                if (bonus.Type == BonusTypes.Resource)
                {
                    e.Mobile.SendMessage(Commonwealth.AvailableResourceBonuses.Bonuses[bonus.DictKey].ToString());
                    resourceBonuses.Add(Commonwealth.AvailableResourceBonuses.Bonuses[bonus.DictKey]);
                }
            }
            //update all the player states to the new bonuses
            foreach (PlayerCitizenshipState pcs in cw.Citizens)
            {
                pcs.ResourceBonuses.Clear();
                pcs.ResourceBonuses.AddRange(resourceBonuses);

            }
        }

        public static void OnCommand_AddCombatBonusToTownship(CommandEventArgs e)
        {

            if (e.Arguments.Length < 1)
            {
                e.Mobile.SendMessage("You must enter which skill to add to your township.");
                return;
            }
            string bonusName = e.Arguments[0];

            ICommonwealth cw = Find(e.Mobile);

            if (!AvailableCombatBonuses.Bonuses.ContainsKey(bonusName))
            {
                e.Mobile.SendMessage("That is not a valid combat bonus type.");
                return;
            }

            bool succesfulAdd = cw.State.AddNewBonus(AvailableCombatBonuses.Bonuses[bonusName]);

            if (!succesfulAdd)
            {
                e.Mobile.SendMessage("The township does not have enough points available to add that bonus package! Your add requires {0} but the township only has {1} points available.",
                    AvailableCombatBonuses.Bonuses[bonusName].PointCost, cw.State.AvailablePoints);
                return;
            }

            e.Mobile.SendMessage("Listing your township's bonuses.");
            List<CommonwealthCombatBonus> combatBonuses = new List<CommonwealthCombatBonus>();
            foreach (CommonwealthBonus bonus in cw.State.Bonuses)
            {
                if (bonus.Type == BonusTypes.Combat)
                {
                    e.Mobile.SendMessage(AvailableCombatBonuses.Bonuses[bonus.DictKey].ToString());
                    combatBonuses.Add(AvailableCombatBonuses.Bonuses[bonus.DictKey]);
                }
            }
            //update all the player states to the new bonuses
            foreach (PlayerCitizenshipState pcs in cw.Citizens)
            {
                pcs.CombatBonuses.Clear();
                pcs.CombatBonuses.AddRange(combatBonuses);

            }
        }

        public static void OnCommand_CitizenshipStatus(CommandEventArgs e)
        {
            ICommonwealth cw = Commonwealth.Find(e.Mobile);
            if (cw != null)
            {
                e.Mobile.SendMessage("You are a member of {0}'s township", cw.Definition.TownName);
                foreach (CommonwealthBonus bonus in cw.State.Bonuses)
                {
                    e.Mobile.SendMessage(bonus.ToString());
                }
                e.Mobile.SendMessage("Your township election status is " + cw.State.Election.CurrentState);
            }
            else
            {
                e.Mobile.SendMessage("You are not a member of a township.");
            }
        }

        //Sends a list of the commonwealths currently in the system with member count
        public static void OnCommand_GetCommonwealths(CommandEventArgs e)
        {
            foreach (Commonwealth cw in Commonwealths)
            {
                e.Mobile.SendMessage("MyCommonwealth for city: {0} has {1} members", cw.Definition.TownName, cw.State.Members.Count);
            }
        }

        public static void OnCommand_JoinCommonwealth(CommandEventArgs e)
        {
            Region region = Region.Find(e.Mobile.Location, Map.Felucca);
            CommonwealthRegion cwRegion = region as CommonwealthRegion;

            if (cwRegion != null)
            {
                ICommonwealth cw = cwRegion.MyCommonwealth;

                if (cw != null)
                    cw.OnJoinAccepted(e.Mobile);
            }
            else
            {
                e.Mobile.SendMessage("You must be within a township's city limits to become a citizen.");
            }
            
        }

        public static void OnCommand_RevokeCitizenship(CommandEventArgs e)
        {
            ICommonwealth cw = Find(e.Mobile);
            if (cw != null)
            {
                PlayerState militiaState = PlayerState.Find(e.Mobile);
                if (militiaState != null)
                {
                    e.Mobile.SendMessage("You may not revoke your citizenship while in the militia. You must first resign from the militia before revoking citizenship.");
                    return;
                }

                PlayerCitizenshipState pcs = PlayerCitizenshipState.Find(e.Mobile);

                if (!pcs.IsLeaving)
                {
                    cw.SetCitizenLeaveTime(e.Mobile);
                    e.Mobile.SendMessage("You have started to revoke your citizenship in {0}, you will be removed at {1}", cw.Definition.TownName, DateTime.Now.Add(LeaveTime));
                }
                else
                {
                    e.Mobile.SendMessage("You are already in the process of revoking your citizenship! You will be removed at {0}", pcs.LeftTownTime.Add(LeaveTime));
                }
            }
            else
            {
                e.Mobile.SendMessage("You are not a part of a township!");
            }
        }

        public static void OnCommand_RevokeCitizenshipNow(CommandEventArgs e)
        {
            ICommonwealth cw = Find(e.Mobile);
            if (cw != null)
            {
                PlayerState militiaState = PlayerState.Find(e.Mobile);
                if (militiaState != null)
                {
                    militiaState.Faction.RemoveMember(e.Mobile);
                }
                cw.RemoveCitizenFromLock(e.Mobile, false);
            }
            else
            {
                e.Mobile.SendMessage("You are not a part of a township!");
            }
        }

        //Command delegate for resetting all commonwealths
        public static void OnCommand_ResetCommonwealths(CommandEventArgs e)
        {
            List<Town> towns = Town.Towns;

            for (int i = 0; i < towns.Count; i++)
            {
                towns[i].Minister = null;
            }

            List<ICommonwealth> commonwealths = Commonwealth.Commonwealths;

            for (int i = 0; i < commonwealths.Count; i++)
            {
                ICommonwealth c = commonwealths[i];

                List<PlayerCitizenshipState> playerCitizenshipStateList = new List<PlayerCitizenshipState>(c.Citizens);

                for (int j = 0; j < playerCitizenshipStateList.Count; j++)
                {
                    c.RemoveCitizenFromLock(playerCitizenshipStateList[j].Mobile, false);
                }

                c.Citizens = new List<PlayerCitizenshipState>();
            }
        }


        public int CompareTo(object obj)
        {
            return mDefinition.SortingIndex - ((Commonwealth)obj).mDefinition.SortingIndex; //i don't really know what is happening here....taken from faction compareto
        }

        public override string ToString()
        {
            return "MyCommonwealth info, Town:" + mDefinition.TownName + " Region:" + mDefinition.Region;
        }

        public void Update()
        {
            LockExpiredRevokers();
            RemoveExpiredCitizens();
        }

        //Adds all of the players that have revoked their citizenship, whose timer's have expired, to the locked citizen list
        private void LockExpiredRevokers()
        {
            List<PlayerCitizenshipState> citizensList = new List<PlayerCitizenshipState>(Citizens);
            foreach (PlayerCitizenshipState citizen in citizensList)
            {
                if (citizen.LeftTownTime <= DateTime.MinValue || citizen.LockedToCommonwealth) continue;
                TimeSpan timeSinceRevoke = DateTime.Now - citizen.LeftTownTime;
                if (timeSinceRevoke >= LeaveTime)
                {
                    LockCitizen(citizen.Mobile);
                }
            }
        }

        //Removes all the players that have their join lock timer expired from the locked citizen list
        private void RemoveExpiredCitizens()
        {
            List<PlayerCitizenshipState> citizensList = new List<PlayerCitizenshipState>(Citizens);
            foreach (PlayerCitizenshipState citizen in citizensList)
            {
                if (citizen.LeftTownTime <= DateTime.MinValue || !citizen.LockedToCommonwealth) continue;
                TimeSpan timeSinceRevoke = DateTime.Now - citizen.LeftTownTime;
                if (timeSinceRevoke >= JoinBlockTime)
                {
                    RemoveCitizenFromLock(citizen.Mobile, false);
                }
            }
        }

        public void LogDoorsNull(Commonwealth cw)
        {
            using (StreamWriter writer = new StreamWriter("doorsnull.txt", true))
            {
                string message = "A hero door is not set up properly for " + cw.Definition.TownName + " at " + DateTime.Now;
                writer.WriteLine(message);
            }
        }

        private class UpdateTimer : Timer
        {
            private Commonwealth mCW;

            public UpdateTimer(TimeSpan delay, TimeSpan interval, Commonwealth cw) : base(delay, interval) 
            {
                mCW = cw;
            }
            protected override void OnTick()
            {
                base.OnTick();
                mCW.Update();
            }
        }
    }
}
