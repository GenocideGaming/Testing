using System;
using System.Collections.Generic;
using Server;
using Server.Mobiles;

namespace Server.Scripts.Custom.BountySystem
{
    /* This entire class is pretty much copy-pasted from the skill loss code in Faction.cs.
     * I have duplicated it here so that it can be manipulated without messing with the faction skill loss,
     * but at some point we should probably refactor it into more generic temporary skill/stat loss code */
    class TemporaryStatloss
    {
        public static void Initialize()
        {
            EventSink.PlayerDeath += new PlayerDeathEventHandler(EventSink_PlayerDeath);
        }

        private static double StatLossFactor = FeatureList.MurderSystem.SkillPercentageToLoseInStatloss / 100;
        private static readonly TimeSpan StatLossPeriod = TimeSpan.FromMinutes(FeatureList.MurderSystem.TemporaryStatlossDuration);

        private static Dictionary<Mobile, StatLossContext> m_StatLoss = new Dictionary<Mobile, StatLossContext>();

        private class StatLossContext
        {
            public Timer m_Timer;
            public List<SkillMod> m_Mods;
        }

        public static bool InStatLoss(Mobile mob)
        {
            return m_StatLoss.ContainsKey(mob);
        }

        public static void ApplyStatLoss(Mobile mob)
        {
            if (InStatLoss(mob))
                return;

            StatLossContext context = new StatLossContext();
            m_StatLoss[mob] = context;

            List<SkillMod> mods = context.m_Mods = new List<SkillMod>();

            for (int i = 0; i < mob.Skills.Length; ++i)
            {
                Skill sk = mob.Skills[i];
                double baseValue = sk.Base;

                if (baseValue > 0)
                {
                    SkillMod mod = new DefaultSkillMod(sk.SkillName, true, -(baseValue * StatLossFactor));

                    mods.Add(mod);
                    mob.AddSkillMod(mod);
                }
            }

            context.m_Timer = Timer.DelayCall(StatLossPeriod, new TimerStateCallback(ClearStatLoss_Callback), mob);
        }

        private static void ClearStatLoss_Callback(object state)
        {
            ClearStatLoss((Mobile)state);
        }

        public static bool ClearStatLoss(Mobile mob)
        {
            StatLossContext context;

            if (!m_StatLoss.TryGetValue(mob, out context))
                return false;

            m_StatLoss.Remove(mob);

            List<SkillMod> mods = context.m_Mods;

            for (int i = 0; i < mods.Count; ++i)
                mob.RemoveSkillMod(mods[i]);

            context.m_Timer.Stop();

            return true;
        }
        public static void EventSink_PlayerDeath(PlayerDeathEventArgs e)
        {
            PlayerMobile slain = e.Mobile as PlayerMobile;
            PlayerMobile slayer = e.Mobile.LastKiller as PlayerMobile;

            if (slain == null || slayer == null
                || (slain.TeamFlags > 1 && slayer.TeamFlags > 1)) // make sure they aren't in some kind of team event
                return;

            if (slain.Kills >= 5 && slayer.BountyHunter)
                TemporaryStatloss.ApplyStatLoss(slain);
            else if (slain.BountyHunter && slayer.Kills >= 5)
                TemporaryStatloss.ApplyStatLoss(slain);
        }
    }
}
