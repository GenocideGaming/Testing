using System;
using System.Collections.Generic;
using Server;
using Server.Multis;
using Server.Targeting;
using Server.ContextMenus;
using Server.Gumps;

namespace Server.Items
{
    public static class CitizenDyeHue
    {
        public static int Vermell { get { return 2148; } }
        public static int Lillano { get { return 1254; } }
        public static int Pedran { get { return 2144; } }
        public static int Arbor { get { return 2132; } }
        public static int Calor { get { return 1507; } }

        public static int Find(string townName)
        {
            switch (townName)
            {
                case "Vermell": { return Vermell; }
                case "Lillano": { return Lillano; }
                case "Pedran": { return Pedran; }
                case "Arbor": { return Arbor; }
                case "Calor": { return Calor; }
                default: { return 0; }
            }
        }
    }

	public class VermellDyeTub : DyeTub
	{
		[Constructable]
		public VermellDyeTub()
		{
            Name = "Vermell dye tub";
			Hue = DyedHue = CitizenDyeHue.Vermell;
			Redyable = false;
		}

        public VermellDyeTub(Serial serial) : base(serial)
		{
		}

		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );

			writer.Write( (int) 0 ); // version
		}

		public override void Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );

			int version = reader.ReadInt();
		}
	}

    public class LillanoDyeTub : DyeTub
    {
        [Constructable]
        public LillanoDyeTub()
        {
            Name = "Lillano dye tub";
            Hue = DyedHue = CitizenDyeHue.Lillano;
            Redyable = false;
        }

        public LillanoDyeTub(Serial serial) : base(serial) { }

        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);

            writer.Write((int)0); // version
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);

            int version = reader.ReadInt();
        }
    }

    public class ArborDyeTub : DyeTub
    {
        [Constructable]
        public ArborDyeTub()
        {
            Name = "Arbor dye tub";
            Hue = DyedHue = CitizenDyeHue.Arbor;
            Redyable = false;
        }

        public ArborDyeTub(Serial serial) : base(serial) { }

        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);

            writer.Write((int)0); // version
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);

            int version = reader.ReadInt();
        }
    }

    public class PedranDyeTub : DyeTub
    {
        [Constructable]
        public  PedranDyeTub()
        {
            Name = "Pedran dye tub";
            Hue = DyedHue = CitizenDyeHue.Pedran;
            Redyable = false;
        }

        public PedranDyeTub(Serial serial) : base(serial) { }

        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);

            writer.Write((int)0); // version
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);

            int version = reader.ReadInt();
        }
    }

    public class CalorDyeTub : DyeTub
    {
        [Constructable]
        public CalorDyeTub()
        {
            Name = "Calor dye tub";
            Hue = DyedHue = CitizenDyeHue.Calor;
            Redyable = false;
        }

        public CalorDyeTub(Serial serial) : base(serial) { }

        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);

            writer.Write((int)0); // version
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);

            int version = reader.ReadInt();
        }
    }
}