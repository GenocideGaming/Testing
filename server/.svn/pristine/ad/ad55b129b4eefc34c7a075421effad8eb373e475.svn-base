
//////////////////////////////////////////////////////////////////////
// Automatically generated by Bradley's GumpStudio and roadmaster's 
// exporter.dll,  Special thanks goes to Daegon whose work the exporter
// was based off of, and Shadow wolf for his Template Idea.
//////////////////////////////////////////////////////////////////////

using System;
using Server;
using Server.Gumps;
using Server.Network;
using Server.Commands;
using Server.Scripts.Custom;
using System.Collections.Generic;
using Server.Scripts.Custom.Citizenship.CommonwealthBonuses;
using Server.Factions;
using Server.Targeting;

namespace Server.Scripts.Custom.Citizenship
{
    public class CommonwealthControlGump : Gump
    {
        Mobile mCaller;
        List<CommonwealthBonus> mBonuses;
        private static ICommonwealth GMMostRecentlyAccessedTownship = null;

        public static void Initialize()
        {
            CommandSystem.Register("TownshipControl", AccessLevel.GameMaster, new CommandEventHandler(TownshipControl_OnCommand));
        }

        [Usage("TownshipControl")]
        [Description("Makes a call to your custom gump--target a CommonwealthStone.")]
        public static void TownshipControl_OnCommand(CommandEventArgs e)
        {
            Mobile caller = e.Mobile;

            if (caller.HasGump(typeof(CommonwealthControlGump)))
                caller.CloseGump(typeof(CommonwealthControlGump));
            caller.BeginTarget(-1, false, TargetFlags.None, new TargetCallback(TownshipSelected));
            caller.SendMessage("Target a CommonwealthStone.  (WARNING: changing bonuses might affect another town if another GM is using the TownshipControl command on another CommonwealthStone at the same time)");
        }

        public static void TownshipSelected(Mobile from, object o)
        {
            CommonwealthStone stone = o as CommonwealthStone;
            if (stone == null)
            {
                from.SendMessage("Not a valid target.");
                return;
            }
            GMMostRecentlyAccessedTownship = stone.MyCommonwealth;
            from.SendGump(new CommonwealthControlGump(from, stone.MyCommonwealth));
        }



        public CommonwealthControlGump(Mobile from, ICommonwealth township) : base( 0, 0 )
        {
            this.Closable=true;
			this.Disposable=true;
			this.Dragable=true;
			this.Resizable=false;

            mCaller = from;
            mBonuses = new List<CommonwealthBonus>();

            if (township == null || (township.Minister != mCaller && mCaller.AccessLevel < AccessLevel.GameMaster))
                return;

            List<CommonwealthBonus> currentBonuses = township.State.Bonuses;
			AddPage(0);
			AddBackground(10, 7, 621, 505, 9250);
			AddLabel(260, 20, 0, @"Minister Control Menu");
			AddButton(30, 63, 1210, 1209, (int)Buttons.addCommanderButton, GumpButtonType.Reply, 0);
			AddLabel(49, 63, 0, @"Assign Commander");

            AddButton(30, 38, 1210, 1209, (int)Buttons.exileListButton, GumpButtonType.Reply, 0);
            AddLabel(49, 38, 0, @"Exile List");

			AddPage(1);

			AddLabel(25, 90, 0, @"Town Bonuses");
            if (!HasBonus("MinistersGuards", currentBonuses))
            {
                AddCheck(25, 120, 210, 211, false, (int)Buttons.mayorsGuards);
                AddLabel(55, 120, 0, @"Minister's Guards (1)");
            }
            if (!HasBonus("DisciplinedGuards", currentBonuses))
            {
                AddCheck(25, 140, 210, 211, false, (int)Buttons.discplinedGuardsCheckbox);
                AddLabel(55, 140, 0, @"Disciplined Guards (1)");
            }
            if (!HasBonus("WatchfulGuards", currentBonuses))
            {
                AddCheck(25, 160, 210, 211, false, (int)Buttons.watchfulGuardsCheckbox);
                AddLabel(55, 160, 0, @"Watchful Guards (2)");
            }
            if (!HasBonus("DiligentMerchants", currentBonuses))
            {
                AddCheck(25, 180, 210, 211, false, (int)Buttons.diligentMerchantsCheckbox);
                AddLabel(55, 180, 0, @"Diligent Merchants (2)");
            }

			AddLabel(25, 210, 0, @"Resource Bonuses");

            if (!HasBonus("Hunting", currentBonuses))
            {
                AddCheck(25, 240, 210, 211, false, (int)Buttons.huntingCheckbox);
                AddLabel(55, 240, 0, @"Hunting (1)");
            }
            if (!HasBonus("Adventurer", currentBonuses))
            {
                AddCheck(25, 260, 210, 211, false, (int)Buttons.adventurerCheckbox);
                AddLabel(55, 260, 0, @"Adventurer (2)");
            }
            if (!HasBonus("Fame", currentBonuses))
            {
                AddCheck(25, 280, 210, 211, false, (int)Buttons.fameCheckbox);
                AddLabel(55, 280, 0, @"Fame (1)");
            }
            if (!HasBonus("Mining", currentBonuses))
            {
                AddLabel(55, 300, 0, @"Mining (1)");
                AddCheck(25, 300, 210, 211, false, (int)Buttons.miningCheckbox);
            }
            if (!HasBonus("Lumberjack", currentBonuses))
            {
                AddCheck(25, 320, 210, 211, false, (int)Buttons.lumberjackCheckbox);
                AddLabel(55, 320, 0, @"Lumberjack (1)");
            }
            if (!HasBonus("Fishinh", currentBonuses))
            {
                AddCheck(25, 340, 210, 211, false, (int)Buttons.fishingCheckbox);
                AddLabel(55, 340, 0, @"Fishing (1)");
            }
            if (!HasBonus("Silver", currentBonuses))
            {
                AddCheck(25, 360, 210, 211, false, (int)Buttons.silverCheckbox);
                AddLabel(55, 360, 0, @"Silver (2)");
            }

            AddLabel(235, 90, 0, @"Skill Bonuses");

            if (!HasBonus("Smithing", currentBonuses))
            {
                AddCheck(235, 120, 210, 211, false, (int)Buttons.smithingCheckbox);
                AddLabel(265, 120, 0, @"Smithing (3)");
            }
            if (!HasBonus("Carpentry", currentBonuses))
            {
                AddCheck(235, 140, 210, 211, false, (int)Buttons.carpentryCheckbox);
                AddLabel(265, 140, 0, @"Carpentry (2)");
            }
            if (!HasBonus("Tailoring", currentBonuses))
            {
                AddCheck(235, 160, 210, 211, false, (int)Buttons.tailoringCheckbox);
                AddLabel(265, 160, 0, @"Tailoring (2)");
            }
            if (!HasBonus("Tinkering", currentBonuses))
            {
                AddCheck(235, 180, 210, 211, false, (int)Buttons.tinkeringCheckbox);
                AddLabel(265, 180, 0, @"Tinkering (1)");
            }
            if (!HasBonus("Alchemy", currentBonuses))
            {
                AddCheck(235, 200, 210, 211, false, (int)Buttons.alchemyCheckbox);
                AddLabel(265, 200, 0, @"Alchemy (2)");
            }
            if (!HasBonus("Poisoning", currentBonuses))
            {
                AddCheck(235, 220, 210, 211, false, (int)Buttons.poisoningCheckbox);
                AddLabel(265, 220, 0, @"Poisoning (1)");
            }
            if (!HasBonus("Scribe", currentBonuses))
            {
                AddCheck(235, 240, 210, 211, false, (int)Buttons.scribCheckbox);
                AddLabel(265, 240, 0, @"Scribe (2)");
            }
            if (!HasBonus("Warrior", currentBonuses))
            {
                AddCheck(235, 260, 210, 211, false, (int)Buttons.warriorCheckbox);
                AddLabel(263, 260, 0, @"Warrior (2)");
            }
            if (!HasBonus("Mage", currentBonuses))
            {
                AddCheck(235, 280, 210, 211, false, (int)Buttons.mageCheckbox);
                AddLabel(265, 280, 0, @"Mage (3)");
            }
            if (!HasBonus("Archery", currentBonuses))
            {
                AddCheck(235, 300, 210, 211, false, (int)Buttons.archerCheckbox);
                AddLabel(265, 300, 0, @"Archer (1)");
            }
            if (!HasBonus("Thieving", currentBonuses))
            {
                AddCheck(235, 320, 210, 211, false, (int)Buttons.thievingCheckbox);
                AddLabel(265, 320, 0, @"Thieving (2)");
            }
            if (!HasBonus("Tamer", currentBonuses))
            {
                AddCheck(235, 340, 210, 211, false, (int)Buttons.tamerCheckbox);
                AddLabel(265, 340, 0, @"Tamer (2)");
            }
            if (!HasBonus("Bard", currentBonuses))
            {
                AddCheck(235, 360, 210, 211, false, (int)Buttons.bardCheckbox);
                AddLabel(265, 360, 0, @"Bard (2)");
            }

			AddLabel(400, 90, 0, @"Combat Bonuses");

            if (!HasBonus("MagicResist", currentBonuses))
            {
                AddCheck(400, 120, 210, 211, false, (int)Buttons.magicResistCheckbox);
                AddLabel(430, 120, 0, @"Magic Resist (2)");
            }
            if (!HasBonus("MagicDamage", currentBonuses))
            {
                AddCheck(400, 140, 210, 211, false, (int)Buttons.magicDamageCheckbox);
                AddLabel(430, 140, 0, @"Magic Damage (2)");
            }
            if (!HasBonus("CombatDamage", currentBonuses))
            {
                AddCheck(400, 160, 210, 211, false, (int)Buttons.weaponDamageCheckbox);
                AddLabel(430, 160, 0, @"Weapon Damage (2)");
            }

            AddLabel(400, 190, 0, @"Hero Bonuses");

            if (!HasBonus("Defiance", currentBonuses))
            {
                AddCheck(400, 220, 210, 211, false, (int)Buttons.defianceCheckbox);
                AddLabel(430, 220, 0, @"Defiance (2)");
            }
            if (!HasBonus("SiegeTools", currentBonuses))
            {
                AddCheck(400, 240, 210, 211, false, (int)Buttons.siegetoolsCheckbox);
                AddLabel(430, 240, 0, @"Siege Tools (2)");
            }
            if (!HasBonus("Intimidation", currentBonuses))
            {
                AddCheck(400, 260, 210, 211, false, (int)Buttons.intimidationCheckbox);
                AddLabel(430, 260, 0, @"Intimidation (2)");
            }
            if (!HasBonus("StrongDoors", currentBonuses))
            {
                AddCheck(400, 280, 210, 211, false, (int)Buttons.strongDoorsCheckbox);
                AddLabel(430, 280, 0, @"Strong Doors (2)");
            }
			AddButton(28, 460, 247, 248, (int)Buttons.acceptBonusesButton, GumpButtonType.Reply, 0);
			AddButton(104, 461, 241, 242, (int)Buttons.cancelBonusesButton, GumpButtonType.Reply, 0);

           
            AddLabel(400, 360, 0, @"Number of points left: "+ township.State.AvailablePoints);

            
        }

        public enum Buttons
		{
			toBonusPageButton,
			addCommanderButton,
			mayorsGuards,
			discplinedGuardsCheckbox,
			watchfulGuardsCheckbox,
			diligentMerchantsCheckbox,
			huntingCheckbox,
			adventurerCheckbox,
			fameCheckbox,
			miningCheckbox,
			lumberjackCheckbox,
			fishingCheckbox,
			silverCheckbox,
			smithingCheckbox,
			carpentryCheckbox,
			tailoringCheckbox,
			tinkeringCheckbox,
			alchemyCheckbox,
			poisoningCheckbox,
			scribCheckbox,
			warriorCheckbox,
			mageCheckbox,
			archerCheckbox,
			thievingCheckbox,
			tamerCheckbox,
			bardCheckbox,
			magicResistCheckbox,
			magicDamageCheckbox,
			weaponDamageCheckbox,
            defianceCheckbox,
            siegetoolsCheckbox,
            intimidationCheckbox,
			acceptBonusesButton,
			cancelBonusesButton,
            exileListButton,
            strongDoorsCheckbox,

		}


        public override void OnResponse(NetState sender, RelayInfo info)
        {
            Mobile from = sender.Mobile;

            ICommonwealth cw;

            if (from.AccessLevel >= AccessLevel.GameMaster)
            {
                cw = GMMostRecentlyAccessedTownship;
            }
            else
            {
                cw = Commonwealth.Find(from);
            }     
           
            if (cw == null)
            {
                from.SendMessage("You are not a part of a township!");
                return;
            }

            if (info.ButtonID == (int)Buttons.acceptBonusesButton)
            {
                //Go through all of the checkboxes which go from 2 - 28
                for (int i = 0; i < info.Switches.Length; i++)
                {
                    int checkbox = info.Switches[i];
                    bool isChecked = info.IsSwitched(checkbox);
                    if (!isChecked)
                        continue;

                    switch (checkbox)
                    {
                      
                        case (int)Buttons.mayorsGuards:
                            {
                                mBonuses.Add(Commonwealth.AvailableTownBonuses.Bonuses["MinistersGuards"]);
                                break;
                            }
                        case (int)Buttons.discplinedGuardsCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableTownBonuses.Bonuses["DisciplinedGuards"]);
                                break;
                            }
                        case (int)Buttons.watchfulGuardsCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableTownBonuses.Bonuses["WatchfulGuards"]);
                                break;
                            }
                        case (int)Buttons.diligentMerchantsCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableTownBonuses.Bonuses["DiligentMerchants"]);
                                break;
                            }
                        case (int)Buttons.huntingCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableResourceBonuses.Bonuses["Hunting"]);
                                break;
                            }
                        case (int)Buttons.adventurerCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableResourceBonuses.Bonuses["Adventurer"]);
                                break;
                            }
                        case (int)Buttons.fameCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableResourceBonuses.Bonuses["Fame"]);
                                break;
                            }
                        case (int)Buttons.miningCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableResourceBonuses.Bonuses["Mining"]);
                                break;
                            }
                        case (int)Buttons.lumberjackCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableResourceBonuses.Bonuses["Lumberjack"]);
                                break;
                            }
                        case (int)Buttons.fishingCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableResourceBonuses.Bonuses["Fishing"]);
                                break;
                            }
                        case (int)Buttons.silverCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableResourceBonuses.Bonuses["Silver"]);
                                break;
                            }
                        case (int)Buttons.smithingCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableSkillBonuses.Bonuses["Smithing"]);
                                break;
                            }
                        case (int)Buttons.carpentryCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableSkillBonuses.Bonuses["Carpentry"]);
                                break;
                            }
                        case (int)Buttons.tailoringCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableSkillBonuses.Bonuses["Tailoring"]);
                                break;
                            }
                        case (int)Buttons.tinkeringCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableSkillBonuses.Bonuses["Tinkering"]);
                                break;
                            }
                        case (int)Buttons.alchemyCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableSkillBonuses.Bonuses["Alchemy"]);
                                break;
                            }
                        case (int)Buttons.poisoningCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableSkillBonuses.Bonuses["Poisoning"]);
                                break;
                            }
                        case (int)Buttons.scribCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableSkillBonuses.Bonuses["Scribe"]);
                                break;
                            }
                        case (int)Buttons.warriorCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableSkillBonuses.Bonuses["Warrior"]);
                                break;
                            }
                        case (int)Buttons.mageCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableSkillBonuses.Bonuses["Mage"]);
                                break;
                            }
                        case (int)Buttons.archerCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableSkillBonuses.Bonuses["Archery"]);
                                break;
                            }
                        case (int)Buttons.thievingCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableSkillBonuses.Bonuses["Thieving"]);
                                break;
                            }
                        case (int)Buttons.tamerCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableSkillBonuses.Bonuses["Tamer"]);
                                break;
                            }
                        case (int)Buttons.bardCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableSkillBonuses.Bonuses["Bard"]);
                                break;
                            }
                        case (int)Buttons.magicResistCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableCombatBonuses.Bonuses["MagicResist"]);
                                break;
                            }
                        case (int)Buttons.magicDamageCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableCombatBonuses.Bonuses["MagicDamage"]);
                                break;
                            }
                        case (int)Buttons.weaponDamageCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableCombatBonuses.Bonuses["CombatDamage"]);
                                break;
                            }
                        case (int)Buttons.defianceCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableHeroBonuses.Bonuses["Defiance"]);
                                break;
                            }
                        case (int)Buttons.siegetoolsCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableHeroBonuses.Bonuses["SiegeTools"]);
                                break;
                            }
                        case (int)Buttons.intimidationCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableHeroBonuses.Bonuses["Intimidation"]);
                                break;
                            }
                        case (int)Buttons.strongDoorsCheckbox:
                            {
                                mBonuses.Add(Commonwealth.AvailableHeroBonuses.Bonuses["StrongDoors"]);
                                break;
                            }
                    
                    }

                   
                }
                //Count up how many points we've used
                int pointTotal = 0;
                foreach (CommonwealthBonus cb in mBonuses)
                {
                    pointTotal += cb.PointCost;
                }

                if (pointTotal > cw.State.AvailablePoints)
                    from.SendMessage("Your township does not have enough points to add your selected bonuses ({0} points assigned). Available Points: {1}", pointTotal, cw.State.AvailablePoints);
                else
                {
                    cw.State.AddNewBonusSet(mBonuses);
                    cw.UpdateCitizens();
                    from.SendMessage("Success! You have assigned bonuses to your township.");
                }
            }
            else if (info.ButtonID == (int)Buttons.addCommanderButton)
            {
                bool canAssignCommander = cw.AssignCommander(from);
                if (!canAssignCommander)
                    from.SendMessage("You cannot currently assign a commander");
            }
            else if (info.ButtonID == (int)Buttons.exileListButton)
            {
                from.SendGump(new ExileGump(from, cw));
            }
           
        }
        private bool HasBonus(string dictKey, List<CommonwealthBonus> bonuses)
        {
            foreach (CommonwealthBonus bonus in bonuses)
            {
                if (bonus.DictKey.Equals(dictKey))
                    return true;
            }
            return false;
        }
    }
    
}