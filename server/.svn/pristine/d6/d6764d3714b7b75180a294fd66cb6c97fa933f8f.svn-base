using System;
using System.Collections;
using Server.Targeting;
using Server.Network;
using Server.Scripts;
using Server.Mobiles;

namespace Server.Spells.Second
{
	public class ProtectionSpell : MagerySpell
	{
		private static Hashtable m_Registry = new Hashtable();
		public static Hashtable Registry { get { return m_Registry; } }

		private static SpellInfo m_Info = new SpellInfo(
				"Protection", "Uus Sanct",
				236,
				9011,
				Reagent.Garlic,
				Reagent.Ginseng,
				Reagent.SulfurousAsh
			);

		public override SpellCircle Circle { get { return SpellCircle.Second; } }

		public ProtectionSpell( Mobile caster, Item scroll ) : base( caster, scroll, m_Info )
		{
		}

		public override bool CheckCast()
		{
			return true;
		}

		private static Hashtable m_Table = new Hashtable();

		public static void EndProtection( Mobile m )
		{
			if ( m_Table.Contains( m ) )
			{
				object[] mods = (object[]) m_Table[ m ];

				m_Table.Remove( m );
				Registry.Remove( m );

				m.RemoveResistanceMod( (ResistanceMod) mods[ 0 ] );
				m.RemoveSkillMod( (SkillMod) mods[ 1 ] );

				BuffInfo.RemoveBuff( m, BuffIcon.Protection );
			}
		}

		public override void OnCast()
		{
            if (Caster is PlayerMobile && ProtectionOnCooldown(Caster) && FeatureList.ScribeMage.Enabled)
            {
                Caster.SendMessage(FeatureList.ScribeMage.ProtectionCooldownText);
            }

			else if ( CheckSequence() )
			{
                if (FeatureList.ScribeMage.Enabled)
                {
                    SpellHelper.NullifyDefensiveSpells(Caster);

                    int minChance = FeatureList.ScribeMage.MinimumInterruptResistChance;
                    int maxChance = FeatureList.ScribeMage.MaximumInterruptResistChance;

                    double skillValue = (Caster.Skills[SkillName.Inscribe].Value +
                                         Caster.Skills[SkillName.SpiritSpeak].Value) / 2;
                    double skillBonus = (skillValue / 100) * (double)(maxChance - minChance);
                    double evadeChance = (double)minChance + skillBonus;

                    Registry.Add(Caster, evadeChance);
                    new InternalTimer(Caster).Start();

                    Caster.FixedParticles(0x375A, 9, 20, 5016, EffectLayer.Waist);
                    Caster.PlaySound(0x1ED);

                    if (Caster is PlayerMobile)
                    {
                        TimeSpan delay = TimeSpan.FromSeconds(FeatureList.ScribeMage.ProtectionReuseDelay);
                        ((PlayerMobile)Caster).NextProtectionAt = DateTime.Now + delay;
                    }
                }

                else
                {
                    CastOldProtectionSpell();
                }
			}

			FinishSequence();
		}

        private bool ProtectionOnCooldown(Mobile Caster)
        {
            PlayerMobile subject = Caster as PlayerMobile;
            if (subject == null) { return false; }

            if (subject.NextProtectionAt > DateTime.Now)
                return true;
            else
                return false;
        }

        private void CastOldProtectionSpell()
        {
            double value = (int)(Caster.Skills[SkillName.EvalInt].Value + Caster.Skills[SkillName.Meditation].Value + Caster.Skills[SkillName.Inscribe].Value);
            value /= 4;

            if (value < 0)
                value = 0;
            else if (value > 75)
                value = 75.0;

            Registry.Add(Caster, value);
            new InternalTimer(Caster).Start();

            Caster.FixedParticles(0x375A, 9, 20, 5016, EffectLayer.Waist);
            Caster.PlaySound(0x1ED);
        }

		private class InternalTimer : Timer
		{
			private Mobile m_Caster;

			public InternalTimer( Mobile caster ) : base( TimeSpan.FromSeconds( 0 ) )
			{
				m_Caster = caster;
				Delay = TimeSpan.FromSeconds( FeatureList.ScribeMage.ProtectionDuration );
				Priority = TimerPriority.OneSecond;
			}

			protected override void OnTick()
			{
                if (ProtectionSpell.m_Registry.ContainsKey( m_Caster ))
                {
				    ProtectionSpell.Registry.Remove( m_Caster );
                }
			}
		}
	}
}
