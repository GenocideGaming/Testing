using System;
using System.Collections.Generic;
using Server;
using Server.Mobiles;
using Server.Scripts;

namespace Server.Items
{
    class SeveredHead : Item, ICarvable
    {
        public static void Initialize()
        {
            EventSink.PlayerDeath += new PlayerDeathEventHandler(EventSink_PlayerDeath);
        }

        private bool m_Decayed;

        [CommandProperty(AccessLevel.GameMaster)]
        public bool Decayed
        {
            get { return m_Decayed; }
        }

        private int m_Reward;

        [CommandProperty(AccessLevel.GameMaster)]
        public int Reward
        {
            get
            {
                return m_Reward;
            }
        }

        private PlayerMobile m_From;

        [CommandProperty(AccessLevel.GameMaster)]
        public PlayerMobile From
        {
            get
            {
                return m_From;
            }
        }

        [CommandProperty(AccessLevel.GameMaster)]
        public Serial OwnerID
        {
            get
            {
                return m_OwnerID;
            }
        }

        [CommandProperty(AccessLevel.GameMaster)]
        public bool OwnerExists
        {
            get
            {
                if (m_From == null)
                    return false;
                else
                    return true;
            }
        }

        string m_OwnerName;
        Serial m_OwnerID;

        [Constructable]
		public SeveredHead(string name, int reward) : base( 0x1CE1 )
		{
			Weight = 1.0;
            m_Reward = reward;
            m_Decayed = false;
            m_OwnerName = name;

            Name = "the head of " + m_OwnerName;
		}


        [Constructable]
        public SeveredHead(PlayerMobile from, int reward)
            : this(from.Name, reward)
        {
            m_From = from;
            m_OwnerID = from.Serial;
        }



        public SeveredHead(Serial serial)
            : base(serial)
		{
		}

        public SeveredHead()
            : base()
		{
		}

        public void Decay()
        {
            m_Decayed = true;
            Name = "the rotting head of " + m_OwnerName;
            Hue = 0x2FB;
        }

		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );

			writer.Write( (int) 4 ); // version

            writer.Write(m_OwnerID);
            writer.Write(m_OwnerName);
            writer.Write(m_Decayed);
            writer.Write(m_From); 
            writer.Write(m_Reward);
		}

		public override void Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );

			int version = reader.ReadInt();

            switch (version)
            {
                case 4:
                    {
                        m_OwnerID = (Serial)reader.ReadInt();
                        goto case 3;
                    }
                case 3:
                    {
                        m_OwnerName = reader.ReadString();
                        goto case 2;
                    }
                case 2:
                    {
                        m_Decayed = reader.ReadBool();
                        goto case 1;
                    }
                case 1:
                    {
                        m_From = (PlayerMobile)reader.ReadMobile();
                        goto case 0;
                    }
                case 0: 
                    {
                        m_Reward = reader.ReadInt();

                        break;
                    }                
            }

		}

        public static void EventSink_PlayerDeath(PlayerDeathEventArgs e)
        {
            PlayerMobile slain = e.Mobile as PlayerMobile;
            PlayerMobile slayer = e.Mobile.LastKiller as PlayerMobile;

            if (slain == null || slayer == null)
                return;

            if (InAmnestyRegion(slain))
                return;

            if (slayer.BountyHunter && slain.Kills >= 5 
                && (slain.Bounty > 0 || slain.PlayerMurdererStatus == PlayerMobile.MurdererStatus.Outcast)
                && (AITeamList.CheckSameTeam(slain,slayer) == false)
                && (AITeamList.CheckEnemyTeam(slain,slayer) == true))
            {
                AwardSeveredHead(slayer, slain);
            }
        }

        private static bool InAmnestyRegion(PlayerMobile slain)
        {
            if (slain.Region.IsPartOf("Roache"))
                return true;

            if (slain.Region.IsPartOf("OrcFort"))
                return true;

            if (slain.Region.IsPartOf("OrcCompound"))
                return true;

            if (slain.Region.IsPartOf("PirateShip"))
                return true;

            if (slain.Region.IsPartOf("DrowCave"))
                return true;

            if (slain.Region.IsPartOf("UndeadCave"))
                return true;

            return false;
        }

        private static void AwardSeveredHead(PlayerMobile slayer, PlayerMobile slain)
        {
            int reward = slain.PlayerBounty / 2;
            SeveredHead head = new SeveredHead(slain, reward);
            HeadRegistry.Add(slain.Serial, head.Serial);

            slayer.SendMessage(0x8A, "You claim the severed head of {0}.", slain.Name);
            new HeadClaimedTimer(slayer, slain).Start();
            slayer.AddToBackpack(head);
        }

        private class HeadClaimedTimer : Timer
        {
            private Mobile slain;
            private Mobile slayer;

            public HeadClaimedTimer(Mobile slayer, Mobile slain)
                : base(TimeSpan.FromSeconds(3.0))
            {
                this.slayer = slayer;
                this.slain = slain;
            }

            protected override void OnTick()
            {
                slain.SendMessage(0x8A, "{0} has claimed your severed head!", slayer.Name);
            }
        }

        public void Carve(Mobile from, Item item)
        {
            from.SendMessage("You destroy the head.");
            this.Delete();
        }

        public static void DecayAllHeads(Serial ownerID) {
            if (ownerID == null) return;
            foreach (Serial headSerial in HeadRegistry.EveryHeadOf(ownerID))
            {
                SeveredHead otherHead = World.FindItem(headSerial) as SeveredHead;

                if (otherHead != null)
                    otherHead.Decay();
            }

            HeadRegistry.RemoveAllHeadsOf(ownerID);
        }
    }
}
